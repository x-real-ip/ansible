---
- name: "Play to check which TrueNAS is master"
  hosts: localhost
  connection: local
  gather_facts: true
  vars:
    domain: "lan.theautomation.nl"
    truenas_hosts:
      - name: "master"
      - name: "a"
      - name: "b"
    truenas_ssh_credentials_id:
      a: 4
      b: 4
    truenas_ssh_private_key_id:
      a:
      b: 3

  tasks:
    - name: Set TrueNAS API variables
      ansible.builtin.include_vars: "group_vars/truenas/{{ item }}.yaml"
      loop:
        - vars
        - vault

    - name: Flush DNS cache
      ansible.builtin.command: resolvectl flush-caches
      when: ansible_distribution in ['Ubuntu', 'Debian', 'Fedora']

    - name: Query DNS for the IP addresses
      ansible.builtin.command: "dig +short truenas-{{ item.name }}.{{ domain }}"
      loop: "{{ truenas_hosts }}"
      register: dig_results
      changed_when: False

    - name: Set IP address variables
      ansible.builtin.set_fact:
        "truenas_{{ item.item.name }}_ip": "{{ item.stdout_lines[0] }}"
      loop: "{{ dig_results.results }}"

    - name: Display the IP address variables
      ansible.builtin.debug:
        msg:
          - "truenas_master_ip: {{ truenas_master_ip }}"
          - "truenas_a_ip: {{ truenas_a_ip }}"
          - "truenas_b_ip: {{ truenas_b_ip }}"

    - name: Set source and target instance (a or b)
      ansible.builtin.set_fact:
        active_instance: >-
          {% if truenas_master_ip == truenas_a_ip %}a{% elif truenas_master_ip == truenas_b_ip %}b{% else %}None{% endif %}
        non_active_instance: >-
          {% if truenas_master_ip == truenas_a_ip %}b{% elif truenas_master_ip == truenas_b_ip %}a{% else %}None{% endif %}

- name: "Play to migrate VM's"
  hosts: "pve-{{ hostvars['localhost']['non_active_instance'] }}"
  vars:
    non_active_instance: "{{ hostvars['localhost']['non_active_instance'] }}"
    active_instance: "{{ hostvars['localhost']['active_instance'] }}"
  tasks:
    - name: Include task get TrueNAS VM id
      ansible.builtin.include_role:
        name: proxmox
        tasks_from: truenas-vm-id.yaml
      vars:
        ansible_hostname: "{{ 'pve-' + non_active_instance }}"

    - name: Convert TrueNAS VM id to a list of integers
      set_fact:
        truenas_vm_id_list: "{{ truenas_vm_id_output.stdout_lines | map('int') | list }}"

    - name: Include task vm migration
      ansible.builtin.include_role:
        name: proxmox
        tasks_from: vm-migration.yaml
      vars:
        source_host: "{{ 'pve-' + non_active_instance }}"
        target_host: "{{ 'pve-' + active_instance }}"
        exclude_vm_id_list: "{{ truenas_vm_id_list }}"

    - name: Include task shutdown VM
      ansible.builtin.include_role:
        name: proxmox
        tasks_from: shutdown-vm.yaml
      vars:
        vm_id: "{{ item }}"
      loop: "{{ truenas_vm_id_list }}"

    - name: Update system
      ansible.builtin.include_role:
        name: common
        tasks_from: system-updates

    - name: Reboot
      ansible.builtin.reboot:

- name: "Play to migrate VM's"
  hosts: "pve-{{ hostvars['localhost']['active_instance'] }}"
  vars:
    non_active_instance: "{{ hostvars['localhost']['non_active_instance'] }}"
    active_instance: "{{ hostvars['localhost']['active_instance'] }}"
  tasks:
    - name: Include task get TrueNAS VM id
      ansible.builtin.include_role:
        name: proxmox
        tasks_from: truenas-vm-id.yaml
      vars:
        ansible_hostname: "{{ 'pve-' + active_instance }}"

    - name: Convert TrueNAS VM id to a list of integers
      set_fact:
        truenas_vm_id_list: "{{ truenas_vm_id_output.stdout_lines | map('int') | list }}"

    - name: Include task vm migration
      ansible.builtin.include_role:
        name: proxmox
        tasks_from: vm-migration.yaml
      vars:
        source_host: "{{ 'pve-' + active_instance }}"
        target_host: "{{ 'pve-' + non_active_instance }}"
        exclude_vm_id_list: "{{ truenas_vm_id_list }}"
