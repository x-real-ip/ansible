# ---
# - name: Play to add settings for the k3s cluster agents and masters
#   hosts: k3s_cluster
#   gather_facts: true
#   become: true
#   tasks:
#     # - name: Print all available facts
#     #   ansible.builtin.debug:
#     #     var: ansible_facts

#     - name: Set timezone
#       community.general.timezone:
#         name: "{{ system_timezone }}"
#       when: (system_timezone is defined) and (system_timezone != "Europe/Amsterdam")

#     - name: Stop and disable service firewalld
#       ansible.builtin.service:
#         name: firewalld
#         state: stopped
#         enabled: false

#     - name: Install the latest version of packages
#       ansible.builtin.dnf:
#         name:
#           - nano
#           - curl
#           - wget
#           - unzip
#           - qemu-guest-agent
#           - nfs-utils
#           - iscsi-initiator-utils
#           - device-mapper-multipath
#           - pip
#         state: latest

#     - name: Install python packages
#       ansible.builtin.pip:
#         name:
#           - kubernetes

#     - name: Set SELinux to disabled state
#       ansible.posix.selinux:
#         state: disabled
#       when: ansible_os_family == "RedHat"

#     - name: Enable IPv4 forwarding
#       ansible.posix.sysctl:
#         name: net.ipv4.ip_forward
#         value: "1"
#         state: present
#         reload: true

#     - name: Enable IPv6 forwarding
#       ansible.posix.sysctl:
#         name: net.ipv6.conf.all.forwarding
#         value: "1"
#         state: present
#         reload: true

#     - name: Enable IPv6 router advertisements
#       ansible.posix.sysctl:
#         name: net.ipv6.conf.all.accept_ra
#         value: "2"
#         state: present
#         reload: true

#     - name: Add br_netfilter to /etc/modules-load.d/
#       ansible.builtin.copy:
#         content: "br_netfilter"
#         dest: /etc/modules-load.d/br_netfilter.conf
#         mode: "u=rw,g=,o="
#       when: ansible_os_family == "RedHat"

#     - name: Load br_netfilter
#       community.general.modprobe:
#         name: br_netfilter
#         state: present
#       when: ansible_os_family == "RedHat"

#     - name: Set bridge-nf-call-iptables (just to be sure)
#       ansible.posix.sysctl:
#         name: "{{ item }}"
#         value: "1"
#         state: present
#         reload: true
#       when: ansible_os_family == "RedHat"
#       loop:
#         - net.bridge.bridge-nf-call-iptables
#         - net.bridge.bridge-nf-call-ip6tables

#     - name: Add /usr/local/bin to sudo secure_path
#       ansible.builtin.lineinfile:
#         line: "Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin"
#         regexp: "Defaults(\\s)*secure_path(\\s)*="
#         state: present
#         insertafter: EOF
#         path: /etc/sudoers
#         validate: "visudo -cf %s"
#       when: ansible_os_family == "RedHat"

#     - name: Disable SWAP
#       ansible.builtin.command: |
#         swapoff -a
#       register: output
#       changed_when: output.rc != 0

#     - name: Disable SWAP in fstab
#       ansible.builtin.replace:
#         path: /etc/fstab
#         regexp: '^([^#].*?\sswap\s+.*)$'
#         replace: '# \1'

#     - name: Enable qemu-guest-agent
#       ansible.builtin.systemd:
#         name: qemu-guest-agent.service
#         state: started
#         enabled: true

#     - name: Enable iscsid
#       ansible.builtin.systemd:
#         name: iscsid.service
#         state: started
#         enabled: true

#     - name: Enable multipathd
#       ansible.builtin.systemd:
#         name: multipathd.service
#         state: started
#         enabled: true

#     - name: Creating a multipath.conf file
#       ansible.builtin.copy:
#         mode: 0644
#         dest: "/etc/multipath.conf"
#         content: |
#           blacklist {
#               devnode "sda"
#           }
#           defaults {
#               user_friendly_names yes
#               find_multipaths yes
#           }

#     - name: Create directory k3s
#       ansible.builtin.file:
#         path: "/etc/rancher/k3s/"
#         state: directory
#         owner: "{{ ansible_user_id }}"
#         mode: 0755

#     - name: Copy registries.yaml file
#       ansible.builtin.template:
#         src: "./templates/k3s/registries.yaml.j2"
#         dest: "/etc/rancher/k3s/registries.yaml"
#         owner: root
#         group: root
#         mode: 0644

#     - name: Copy main config.yaml file
#       ansible.builtin.template:
#         src: "./templates/k3s/k3s_config_main.yaml.j2"
#         dest: "/etc/rancher/k3s/config.yaml"
#         owner: root
#         group: root
#         mode: 0644
#         force: false

#     - name: Add init flag to config file only on first master
#       ansible.builtin.lineinfile:
#         path: "/etc/rancher/k3s/config.yaml"
#         line: "cluster-init: true"
#         create: true
#         owner: root
#         group: root
#         mode: 0644
#       when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

#     - name: Add server flag config file on all master nodes except the first
#       ansible.builtin.lineinfile:
#         path: "/etc/rancher/k3s/config.yaml"
#         line: "server: https://{{ server_ip }}:6443"
#         create: true
#         owner: root
#         group: root
#         mode: 0644
#       when: ansible_hostname | regex_search("^k3s-mas(.*)$") and ansible_hostname != hostvars[groups['k3s_master'][0]]['ansible_hostname']

#     - name: Download k3s install script
#       ansible.builtin.get_url:
#         url: https://get.k3s.io
#         dest: "/etc/rancher/k3s/k3s_install.sh"
#         mode: 0775

#     - name: Run k3s install script on first master node
#       ansible.builtin.command: "sh /etc/rancher/k3s/k3s_install.sh"
#       register: output
#       changed_when: output.rc != 0
#       when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

#     - name: Wait for first master node to be ready so other nodes can join
#       ansible.builtin.command: "kubectl get nodes"
#       register: nodes
#       until:
#         - '" Ready "  in nodes.stdout'
#       retries: 10
#       delay: 4
#       when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

#     - name: Run k3s install script on the other nodes
#       ansible.builtin.command: "sh /etc/rancher/k3s/k3s_install.sh"
#       register: output
#       changed_when: output.rc != 0
#       when: ansible_hostname != hostvars[groups['k3s_master'][0]]['ansible_hostname']

#     - name: Verify that all nodes actually joined
#       ansible.builtin.command:
#         cmd: k3s kubectl get nodes -l "node-role.kubernetes.io/master=true" -o=jsonpath="{.items[*].metadata.name}"
#       register: nodes
#       until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups['k3s_master'] | length)
#       retries: "{{ retry_count | default(20) }}"
#       delay: 10
#       changed_when: false
#       failed_when: false

- name: Play to add settings for the k3s masters
  hosts: k3s_master
  gather_facts: true
  become: true
  tasks:
    # - name: Create directory .kube
    #   ansible.builtin.file:
    #     path: "{{ ansible_user_dir }}/.kube"
    #     state: directory
    #     owner: "{{ ansible_user_id }}"
    #     mode: "u=rwx,g=rx,o="

    # - name: Copy config file to user home directory
    #   ansible.builtin.copy:
    #     src: /etc/rancher/k3s/k3s.yaml
    #     dest: "{{ ansible_user_dir }}/.kube/config"
    #     remote_src: true
    #     owner: "{{ ansible_user_id }}"
    #     mode: "u=rw,g=,o="

    # - name: Configure cluster IP in the kube config file to {{ endpoint_url }}
    #   ansible.builtin.command: >-
    #     k3s kubectl config set-cluster default
    #       --server={{ endpoint_url }}
    #       --kubeconfig {{ ansible_user_dir }}/.kube/config
    #   changed_when: true
    #   vars:
    #     endpoint_url: >-
    #       https://{{ apiserver_endpoint | ansible.utils.ipwrap }}:6443

    # - name: Copy config file to the home directory of this local device
    #   ansible.builtin.fetch:
    #     src: "{{ ansible_user_dir }}/.kube/config"
    #     dest: "~/.kube/config"
    #     flat: true
    #   when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

    # - name: Configure kubectl cluster to {{ endpoint_url }}
    #   ansible.builtin.command: >-
    #     k3s kubectl apply -f /var/lib/rancher/k3s/server/manifests/drone-kubeconfig-secret.yaml
    #   changed_when: true
    #   when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

    - name: Create Kubernetes namespaces
      kubernetes.core.k8s:
        name: "{{ item }}"
        api_version: v1
        kind: Namespace
        state: present
      loop: "{{ kubernetes_namespaces }}"
      when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

    - name: Read kube config file as base64(slurp) for drone secret
      ansible.builtin.slurp:
        src: "{{ ansible_user_dir }}/.kube/config"
      register: base64_kubeconfig
      when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

    - name: Apply drone secret kube config to the cluster
      kubernetes.core.k8s:
        state: present
        template: "./k3s/manifests/drone-kubeconfig-secret.yaml.j2"
      when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

    - name: Download metallb manifests from github to the first master node
      ansible.builtin.get_url:
        url: "{{ github_infra_manifests }}/{{ item }}.yaml"
        dest: ~/{{ item }}.yaml
        mode: "0664"
      with_items:
        - metallb
      when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

    - name: Apply metallb manifests to the first master node
      kubernetes.core.k8s:
        state: present
        src: ~/{{ item }}.yaml
      with_items:
        - metallb
      when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

    # Here metallb resource ready checks

    - name: Read template files from the Ansible controller file system and apply to the cluster
      kubernetes.core.k8s:
        state: present
        template: "./k3s/manifests/{{ item }}.yaml.j2"
      loop: "{{ infra_template_manifests }}"
      when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

    - name: Download infrastructure manifests from github to the first master node
      ansible.builtin.get_url:
        url: "{{ github_infra_manifests }}/{{ item }}.yaml"
        dest: ~/{{ item }}.yaml
        mode: "0664"
      when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']
      loop: "{{ infra_github_manifests }}"

    - name: Apply infrastructure manifests from github to the first master node
      kubernetes.core.k8s:
        state: present
        src: ~/{{ item }}.yaml
      when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']
      loop: "{{ infra_github_manifests }}"


    # - name: Create directory .kube
    #   ansible.builtin.file:
    #     path: "{{ ansible_user_dir }}/.kube"
    #     state: directory
    #     owner: "{{ ansible_user_id }}"
    #     mode: "u=rwx,g=rx,o="

    # - name: Copy config file to user home directory
    #   ansible.builtin.copy:
    #     src: /etc/rancher/k3s/k3s.yaml
    #     dest: "{{ ansible_user_dir }}/.kube/config"
    #     remote_src: true
    #     owner: "{{ ansible_user_id }}"
    #     mode: "u=rw,g=,o="

    # - name: Configure cluster IP in the kube config file to {{ endpoint_url }}
    #   ansible.builtin.command: >-
    #     k3s kubectl config set-cluster default
    #       --server={{ endpoint_url }}
    #       --kubeconfig {{ ansible_user_dir }}/.kube/config
    #   changed_when: true
    #   vars:
    #     endpoint_url: >-
    #       https://{{ apiserver_endpoint | ansible.utils.ipwrap }}:6443

    # - name: Copy config file to the home directory of this local device
    #   ansible.builtin.fetch:
    #     src: "{{ ansible_user_dir }}/.kube/config"
    #     dest: "~/.kube/config"
    #     flat: true
    #   when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

    # - name: Configure kubectl cluster to {{ endpoint_url }}
    #   ansible.builtin.command: >-
    #     k3s kubectl apply -f /var/lib/rancher/k3s/server/manifests/drone-kubeconfig-secret.yaml
    #   changed_when: true
    #   when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']
