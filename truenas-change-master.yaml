---

# ansible-playbook --ask-vault-pass truenas-change-master.yaml  
- name: "Play to check which TrueNAS is master"
  hosts: localhost
  connection: local
  gather_facts: true
  vars:
    domain: "lan.theautomation.nl"
    truenas_hosts:
      - name: "master"
      - name: "a"
      - name: "b"
    truenas_ssh_credentials_id:
      a: 4
      b: 4
    truenas_ssh_private_key_id:
      a:
      b: 3

  tasks:
    - name: Set TrueNAS API variables
      include_vars: "group_vars/truenas/{{ item }}.yaml"
      loop:
        - vars
        - vault

    - name: Flush DNS cache
      ansible.builtin.command: resolvectl flush-caches
      when: ansible_distribution in ['Ubuntu', 'Debian', 'Fedora']

    - name: Query DNS for the IP addresses
      command: "dig +short truenas-{{ item.name }}.{{ domain }}"
      loop: "{{ truenas_hosts }}"
      register: dig_results

    - name: Set IP address variables
      set_fact:
        "truenas_{{ item.item.name }}_ip": "{{ item.stdout_lines[0] }}"
      loop: "{{ dig_results.results }}"

    - name: Display the IP address variables
      debug:
        msg:
          - "truenas_master_ip: {{ truenas_master_ip }}"
          - "truenas_a_ip: {{ truenas_a_ip }}"
          - "truenas_b_ip: {{ truenas_b_ip }}"

    - name: Set source and target truenas instance
      set_fact:
        source_instance: >-
          {% if truenas_master_ip == truenas_a_ip %}
            a
          {% elif truenas_master_ip == truenas_b_ip %}
            b
          {% else %}
            None
          {% endif %}
        target_instance: >-
          {% if truenas_master_ip == truenas_a_ip %}
            b
          {% elif truenas_master_ip == truenas_b_ip %}
            a
          {% else %}
            None
          {% endif %}

    - name: Set truenas_api_key based on source target instances
      set_fact:
        source_truenas_api_key: "{{ truenas[source_instance | trim].api_key | default('None') }}"

    - name: Set truenas ssh credentials id and private key id based on source target instances
      set_fact:
        source_truenas_ssh_credentials_id: "{{ truenas_ssh_credentials_id[source_instance | trim] | int }}"
        source_truenas_ssh_private_key_id: "{{ truenas_ssh_private_key_id[source_instance | trim] | int }}"

    # - name: Check all replication taks on truenas-master and wait for a running state
    #   uri:
    #     url: "https://truenas-{{ source_instance | trim }}.{{ domain }}/api/v2.0/replication/id/{{ item }}"
    #     method: GET
    #     headers:
    #       Authorization: "Bearer {{ source_truenas_api_key | trim }}"
    #       Content-Type: "application/json"
    #     validate_certs: no
    #   register: running_replication_result
    #   until: running_replication_result.json.job.state == "RUNNING"
    #   retries: 100
    #   delay: 10
    #   loop: "{{ existing_replication_result.json | map(attribute='id') | list }}"





    # - name: Debug
    #   debug:
    #     msg: "{{ existing_cloudsync_result }}"
# () Flush local DNS
# () Move VM's to the target Proxmox node
# () Delete containers that uses truenas storage
# (done) Create snapshot task on current master
# (done) Run replication from master to target
# (done) Disable replication task on current master
# () Disable Cloud Sync on current master
# () Set target as the new master via pfSense API
# ()
# () Flush local DNS on k3s nodes
# () Apply manifests that uses truenas storage
# () Enable replication task on target
