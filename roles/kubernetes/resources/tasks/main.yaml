---
- name: Create directory .kube
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.kube"
    state: directory
    owner: "{{ ansible_user_id }}"
    mode: "u=rwx,g=rx,o="

- name: Copy kube config file to user home directory
  ansible.builtin.copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ ansible_user_dir }}/.kube/config"
    remote_src: true
    owner: "{{ ansible_user_id }}"
    mode: "u=rw,g=,o="

- name: Create Kubernetes namespaces
  kubernetes.core.k8s:
    name: "{{ item }}"
    api_version: v1
    kind: Namespace
    state: present
  loop: "{{ kubernetes_namespaces }}"
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']
  run_once: true

- name: Deploy kube-vip
  ansible.builtin.include_tasks: kube_vip.yaml
  when: apiserver_endpoint and flannel_iface and kube_vip_tag_version is defined

- name: Deploy bitnami-sealed-secret
  ansible.builtin.include_tasks: bitnami-sealed-secret.yaml
  when: sealed_secret_customkeys_2_tls_key is defined

# - name: Deploy metallb
#   include_tasks: metallb.yml

- name: Configure cluster IP in the kube config file to {{ endpoint_url }}
  ansible.builtin.command: >-
    k3s kubectl config set-cluster default
      --server={{ endpoint_url }}
      --kubeconfig {{ ansible_user_dir }}/.kube/config
  changed_when: true
  vars:
    endpoint_url: >-
      https://{{ apiserver_endpoint }}:6443

- name: Copy config file to the home directory of this local device
  ansible.builtin.fetch:
    src: "{{ ansible_user_dir }}/.kube/config"
    dest: "~/.kube/config"
    flat: true
  run_once: true

- name: Read kube config file as base64(slurp) for drone secret
  ansible.builtin.slurp:
    src: "{{ ansible_user_dir }}/.kube/config"
  register: base64_kubeconfig
  run_once: true

- name: Apply drone kube config secret to the k3s cluster
  kubernetes.core.k8s:
    state: present
    template: "drone-kubeconfig-secret.yaml.j2"
  run_once: true

# - name: Read template files from the Ansible controller file system and apply to the cluster
#   kubernetes.core.k8s:
#     state: present
#     template: "./k3s/manifests/{{ item }}.yaml.j2"
#   loop: "{{ infra_template_manifests }}"
#   when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

# - name: Download infrastructure manifests from github to the first master node
#   ansible.builtin.get_url:
#     url: "{{ github_infra_manifests }}/{{ item }}.yaml"
#     dest: ~/{{ item }}.yaml
#     mode: "0664"
#   when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']
#   loop: "{{ infra_github_manifests }}"

# - name: Apply infrastructure manifests from github to the first master node
#   kubernetes.core.k8s:
#     state: present
#     src: ~/{{ item }}.yaml
#   when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']
#   loop: "{{ infra_github_manifests }}"