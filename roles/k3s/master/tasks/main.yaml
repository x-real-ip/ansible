---
- name: Clean previous runs of k3s-init
  ansible.builtin.systemd:
    name: k3s-init
    state: stopped
  failed_when: false

- name: Clean previous runs of k3s-init
  ansible.builtin.command: systemctl reset-failed k3s-init
  failed_when: false
  changed_when: false
  args:
    warn: false # The ansible systemd module does not support reset-failed

- name: Create manifests directory on first master
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server/manifests
    state: directory
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Copy namespaces manifest to first master
  ansible.builtin.template:
    src: "manifest-namespaces.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/manifest-namespaces.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Copy kube-vip manifest to first master
  ansible.builtin.template:
    src: "manifest-kube-vip.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/manifest-kube-vip.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Copy bitnami manifest to first master
  ansible.builtin.template:
    src: "manifest-bitnami.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/manifest-bitnami.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Copy harbor registry secrets manifest to first master
  ansible.builtin.template:
    src: "secrets-harbor-registry-creds.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/secrets-harbor-registry-creds.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Copy metallb addresspool manifest to first master
  ansible.builtin.template:
    src: "manifest-metallb-addresspool.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/manifest-metallb-addresspool.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Copy metallb manifest to first master
  ansible.builtin.template:
    src: "manifest-metallb.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/manifest-metallb.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Copy csi manifest to first master
  ansible.builtin.template:
    src: "manifest-csi-manual.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/manifest-csi-manual.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Copy nginx prd-int manifest to first master
  ansible.builtin.template:
    src: "manifest-nginx-ingress-prd-int.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/manifest-nginx-ingress-prd-int.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Copy nginx prd-ext manifest to first master
  ansible.builtin.template:
    src: "manifest-nginx-ingress-prd-ext.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/manifest-nginx-ingress-prd-ext.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Copy wildcard cert k8s.lan manifest to first master
  ansible.builtin.template:
    src: "manifest-tls-wildcard-k8s-lan.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/manifest-tls-wildcard-k8s-lan.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Copy wildcard cert theautomation.nl manifest to first master
  ansible.builtin.template:
    src: "manifest-tls-wildcard-theautomation-nl.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/manifest-tls-wildcard-theautomation-nl.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Copy node feature discovery manifest to first master
  ansible.builtin.template:
    src: "manifest-feature-discovery.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/manifest-feature-discovery.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Copy sealed secret custom keys manifest to first master
  ansible.builtin.template:
    src: "sealed-secret-customkeys-2.yaml.j2"
    dest: "/var/lib/rancher/k3s/server/manifests/sealed-secret-customkeys-2.yaml"
    owner: root
    group: root
    mode: 0644
  when: ansible_hostname == hostvars[groups['k3s_master'][0]]['ansible_hostname']

- name: Create directory k3s
  ansible.builtin.file:
    path: "/etc/rancher/k3s/"
    state: directory
    owner: "{{ ansible_user_id }}"
    mode: 755

- name: Copy registries.yaml file
  ansible.builtin.template:
    src: "registries.yaml.j2"
    dest: "/etc/rancher/k3s/registries.yaml"
    owner: root
    group: root
    mode: 0644

- name: Init cluster inside the transient k3s-init service
  ansible.builtin.command:
    cmd: "systemd-run -p RestartSec=2 \
      -p Restart=on-failure \
      --unit=k3s-init \
      k3s server {{ server_init_args }}"
    creates: "{{ systemd_dir }}/k3s.service"

- name: Verification
  when: not ansible_check_mode
  block:
    - name: Verify that all nodes actually joined (check k3s-init.service if this fails)
      ansible.builtin.command:
        cmd: k3s kubectl get nodes -l "node-role.kubernetes.io/master=true" -o=jsonpath="{.items[*].metadata.name}"
      register: nodes
      until: nodes.rc == 0 and (nodes.stdout.split() | length) == (groups['k3s_master'] | length)
      retries: "{{ retry_count | default(20) }}"
      delay: 10
      changed_when: false
  always:
    - name: Save logs of k3s-init.service
      ansible.builtin.include_tasks: fetch_k3s_init_logs.yml
      when: log_destination
      vars:
        log_destination: >-
          {{ lookup('ansible.builtin.env', 'ANSIBLE_K3S_LOG_DIR', default=False) }}
    - name: Kill the temporary service used for initialization
      ansible.builtin.systemd:
        name: k3s-init
        state: stopped
      failed_when: false

- name: Copy K3s service file
  register: k3s_service
  ansible.builtin.template:
    src: "k3s.service.j2"
    dest: "{{ systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: 0644

- name: Enable and check K3s service
  ansible.builtin.systemd:
    name: k3s
    daemon_reload: true
    state: restarted
    enabled: true

- name: Wait for node-token
  ansible.builtin.wait_for:
    path: /var/lib/rancher/k3s/server/node-token

- name: Register node-token file access mode
  ansible.builtin.stat:
    path: /var/lib/rancher/k3s/server
  register: p

- name: Change file access node-token
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server
    mode: "g+rx,o+rx"

- name: Read node-token from master
  ansible.builtin.slurp:
    src: /var/lib/rancher/k3s/server/node-token
  register: node_token

- name: Store Master node-token
  ansible.builtin.set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Restore node-token file access
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server
    mode: "{{ p.stat.mode }}"

- name: Create directory .kube
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.kube"
    state: directory
    owner: "{{ ansible_user_id }}"
    mode: "u=rwx,g=rx,o="

- name: Copy config file to user home directory
  ansible.builtin.copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ ansible_user_dir }}/.kube/config"
    remote_src: yes
    owner: "{{ ansible_user_id }}"
    mode: "u=rw,g=,o="

- name: Configure kubectl cluster to {{ endpoint_url }}
  ansible.builtin.command: >-
    k3s kubectl config set-cluster default
      --server={{ endpoint_url }}
      --kubeconfig {{ ansible_user_dir }}/.kube/config
  changed_when: true
  vars:
    endpoint_url: >-
      https://{{ apiserver_endpoint | ansible.utils.ipwrap }}:6443

- name: Create kubectl symlink
  ansible.builtin.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: Create crictl symlink
  ansible.builtin.file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link

- name: Get contents of manifests folder
  ansible.builtin.find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: file
  register: k3s_server_manifests

- name: Get sub dirs of manifests folder
  ansible.builtin.find:
    paths: /var/lib/rancher/k3s/server/manifests
    file_type: directory
  register: k3s_server_manifests_directories

# - name: Remove manifests and folders that are only needed for bootstrapping cluster so k3s doesn't auto apply on start
#   file:
#     path: "{{ item.path }}"
#     state: absent
#   with_items:
#     - "{{ k3s_server_manifests.files }}"
#     - "{{ k3s_server_manifests_directories.files }}"
#   loop_control:
#     label: "{{ item.path }}"
