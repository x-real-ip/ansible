---
- name: Get the primary DNS IP from the system's resolv.conf
  set_fact:
    primary_dns_ip: "{{ ansible_dns.nameservers[0] | default('8.8.8.8') }}"
  when: ansible_os_family == "Debian"

- name: Ensure dynamically discovered DNS is set in /etc/systemd/resolved.conf
  lineinfile:
    path: /etc/systemd/resolved.conf
    regexp: "^#?DNS="
    line: "DNS={{ primary_dns_ip }}"
    state: present
  notify: Restart systemd-resolved
  when: ansible_os_family == "Debian"

- name: Ensure FallbackDNS is set in /etc/systemd/resolved.conf
  lineinfile:
    path: /etc/systemd/resolved.conf
    regexp: "^#?FallbackDNS="
    line: "FallbackDNS=1.1.1.1 8.8.8.8"
    state: present
  notify: Restart systemd-resolved
  when: ansible_os_family == "Debian"

- name: Stop and disable service firewalld
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: false
  when: ansible_os_family == "RedHat"

- name: Install the latest version of dnf packages
  ansible.builtin.dnf:
    name:
      - nano
      - curl
      - wget
      - unzip
      - qemu-guest-agent
      - nfs-utils
      - iscsi-initiator-utils
      - device-mapper-multipath
      - python3
      - pip
      - jq
      - yum-utils
      - cryptsetup
      - cloud-utils-growpart
    state: present
  when: ansible_os_family == "RedHat"

- name: Install the latest version of apt packages
  ansible.builtin.apt:
    name:
      - nano
      - curl
      - wget
      - unzip
      - nfs-common
      - open-iscsi
      - multipath-tools
      - python3-pip
      - jq
      - lvm2
      - cryptsetup
      - avahi-daemon
    state: present
    update_cache: true
  when: ansible_os_family == "Debian"

- name: Install the latest version of avahi-daemon on the worker nodes
  ansible.builtin.apt:
    name:
      - avahi-daemon
    state: present
    update_cache: true
  when: ansible_os_family == 'Debian' and 'k3s_worker' in group_names

- name: Enable avahi reflector
  ansible.builtin.lineinfile:
    path: /etc/avahi/avahi-daemon.conf
    regexp: "^#enable-reflector=no"
    line: "enable-reflector=yes"
  when: "'k3s_worker' in group_names"

- name: Enable and start service avahi-daemon, if not started
  service:
    name: avahi-daemon
    state: started
    enabled: yes
  when: "'k3s_worker' in group_names"

- name: >-
    Install kubernetes python packages for Ansible kubernetes.core.k8s module
  ansible.builtin.pip:
    name:
      - kubernetes
      - kubernetes-validate
    virtualenv: "{{ venv_dir }}"
  when: "'k3s_master' in group_names"

- name: Set SELinux to disabled state
  ansible.posix.selinux:
    state: disabled
  register: selinux
  notify: Reboot
  when: ansible_os_family == "RedHat"

- name: Enable IPv4 forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    reload: true

- name: Enable IPv6 forwarding
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.forwarding
    value: "1"
    state: present
    reload: true

- name: Enable IPv6 router advertisements
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.accept_ra
    value: "2"
    state: present
    reload: true

- name: Add br_netfilter to /etc/modules-load.d/
  ansible.builtin.copy:
    content: "br_netfilter"
    dest: /etc/modules-load.d/br_netfilter.conf
    mode: "u=rw,g=,o="
  when: ansible_os_family == "RedHat"

- name: Load br_netfilter
  community.general.modprobe:
    name: br_netfilter
    state: present
  when: ansible_os_family == "RedHat"

- name: Set bridge-nf-call-iptables (just to be sure)
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
    reload: true
  when: ansible_os_family == "RedHat"
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables

- name: Add /usr/local/bin to sudo secure_path
  ansible.builtin.lineinfile:
    line: "Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin"
    regexp: "Defaults(\\s)*secure_path(\\s)*="
    state: present
    insertafter: EOF
    path: /etc/sudoers
    validate: "visudo -cf %s"
  when: ansible_os_family == "RedHat"

- name: Disable SWAP
  ansible.builtin.command: |
    swapoff -a
  register: output
  changed_when: output.rc != 0

- name: Disable SWAP in fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+.*)$'
    replace: '# \1'

- name: Enable qemu-guest-agent
  ansible.builtin.systemd:
    name: qemu-guest-agent.service
    state: started
    enabled: true
  when: "'k3s_master' in group_names"

- name: Enable iscsid
  ansible.builtin.systemd:
    name: iscsid.service
    state: started
    enabled: true

- name: Enable multipathd
  ansible.builtin.systemd:
    name: multipathd.service
    state: started
    enabled: true

- name: Creating a multipath.conf file
  ansible.builtin.copy:
    dest: "/etc/multipath.conf"
    content: |
      blacklist {
          devnode "sda"
      }
      defaults {
          user_friendly_names yes
          find_multipaths yes
      }
    mode: "0644"
