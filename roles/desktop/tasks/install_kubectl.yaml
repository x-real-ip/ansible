---
- name: Get latest kubectl version
  ansible.builtin.uri:
    url: https://dl.k8s.io/release/stable.txt
    return_content: yes
  register: kubectl_version

- name: Debug
  debug:
    msg: "{{ kubectl_version.content }}"

- name: Set kubectl URL based on architecture
  set_fact:
    kubectl_url: >-
      https://dl.k8s.io/release/{{ kubectl_version.content }}/bin/linux/{{
      'amd64' if ansible_architecture == 'x86_64'
      else 'arm64' if ansible_architecture == 'aarch64'
      else 'arm' if ansible_architecture == 'armv7l'
      else 'unknown' }}/kubectl

- name: Fail if architecture is unknown
  fail:
    msg: "Unsupported architecture: {{ ansible_architecture }}"
  when: kubectl_url.endswith('unknown/kubectl')

- name: Download kubectl
  ansible.builtin.get_url:
    url: "https://cdn.dl.k8s.io/release/{{ kubectl_version.content }}/bin/linux/amd64/kubectl"
    dest: /usr/local/bin/kubectl
    mode: '0755'
    owner: root
    group: root
    force: yes

- name: Download the kubectl checksum file
  ansible.builtin.uri:
    url: https://dl.k8s.io/{{ kubectl_version.content }}/bin/linux/amd64/kubectl.sha256
    dest: "{{ ansible_user_dir }}"

- name: Validate the kubectl binary against the checksum file
  ansible.builtin.shell: echo "$(cat {{ ansible_user_dir }}/kubectl.sha256) /usr/local/bin/kubectl" | sha256sum --check
  register: result

- name: Assert that the kubectl binary is OK
  vars:
    expected: "/usr/local/bin/kubectl: OK"
  assert:
    that:
      - result.stdout == expected
    fail_msg: "{{ result.stdout }}"
    success_msg: "{{ result.stdout }}"

- name: Check if kubectl is installed
  ansible.builtin.shell: kubectl version --client
  register: client
  failed_when: client.rc > 1
